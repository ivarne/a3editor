import { createSlice } from "@reduxjs/toolkit";
import {  RepoRoot } from "../types";
import { load } from "./currentRepoSlice";


const initialState = {} as RepoRoot;

// Redux Toolkit allows us to write "mutating" logic in reducers. It
// doesn't actually mutate the state because it uses the Immer library,
// which detects changes to a "draft state" and produces a brand new
// immutable state based off those changes
export const initialRepoSlice = createSlice({
  name: "initialRepo",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(load, (_, action) => {
        return action.payload
      })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = 'idle';
    //     state.value += action.payload;
    //   });
  },
});

// export const {} = initialSlice.actions;

export default initialRepoSlice.reducer;
