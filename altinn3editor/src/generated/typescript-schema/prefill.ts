//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.5.2.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------





/** Data from the Altinn user profile. */
export interface UserProfile {
    /** ID of the user. */
    UserId?: string;
    /** The username. */
    UserName?: string;
    /** The users phone number. */
    PhoneNumber?: string;
    /** The users email. */
    Email?: string;
    /** The users party id. */
    PartyId?: string;
    /** The user type (default = 0, user = 1, org = 2). */
    UserType?: string;
    /** The user's language preference in Altinn */
    "ProfileSettingPreference.Language"?: string;
    /** The user's preselected party. */
    "ProfileSettingPreference.PreSelectedPartyId"?: string;
    /** Boolean indicating whether the users want to be asked for the party on every form submission. */
    "ProfileSettingsPreference.DoNotPromptForParty"?: string;
    /** The if of the users party. */
    "Party.PartyId"?: string;
    /** The type of the users party. (Person = 1, Organization = 2, SelfIdentified = 3, SubUnit = 4, BankruptcyEstate = 5)  */
    "Party.PartyTypeName"?: string;
    /** The party organization number. */
    "Party.OrgNumber"?: string;
    /** The party social security number. */
    "Party.SSN"?: string;
    /** The party unit type. */
    "Party.UnitType"?: string;
    /** The party name. */
    "Party.Name"?: string;
    /** Boolean value indicating if the party is deleted. */
    "Party.isDeleted"?: string;
    /** Boolean value indicating whether if the reportee in the list is only there for showing the hierarchy (a parent unit with no access). */
    "Party.OnlyHierarchyElementWithNoAccess"?: string;
    /** The social security number. */
    "Party.Person.SSN"?: string;
    /** The name persons full name. */
    "Party.Person.Name"?: string;
    /** The persons first name. */
    "Party.Person.FirstName"?: string;
    /** The persons middle name. */
    "Party.Person.MiddleName"?: string;
    /** The persons last name. */
    "Party.Person.LastName"?: string;
    /** The telephone number. */
    "Party.Person.TelephoneNumber"?: string;
    /** The mobile number. */
    "Party.Person.MobileNumber"?: string;
    /** The mailing address. */
    "Party.Person.MailingAddress"?: string;
    /** The mailing address postal code. */
    "Party.Person.MailingPostalCode"?: string;
    /** The mailing address postal city. */
    "Party.Person.MailingPostalCity"?: string;
    /** The address municipal number. */
    "Party.Person.AddressMunicipalNumber"?: string;
    /** The address municipal name. */
    "Party.Person.AddressMunicipalName"?: string;
    /** The address street name. */
    "Party.Person.AddressStreetName"?: string;
    /** The address house number. */
    "Party.Person.AddressHouseNumber"?: string;
    /** The address house letter. */
    "Party.Person.AddressHouseLetter"?: string;
    /** The address postal code. */
    "Party.Person.AddressPostalCode"?: string;
    /** The address city. */
    "Party.Person.AddressCity"?: string;
    /** The organization number */
    "Party.Organization.OrgNumber"?: string;
    /** The organization name. */
    "Party.Organization.Name"?: string;
    /** The unit type. */
    "Party.Organization.UnitType"?: string;
    /** The phone number */
    "Party.Organization.TelephoneNumber"?: string;
    /** The mobile number. */
    "Party.Organization.MobileNumber"?: string;
    /** The fax number. */
    "Party.Organization.FaxNumber"?: string;
    /** The email address. */
    "Party.Organization.EMailAddress"?: string;
    /** The internet address. */
    "Party.Organization.InternetAddress"?: string;
    /** The mailing address. */
    "Party.Organization.MailingAddress"?: string;
    /** The mailing address. */
    "Party.Organization.MailingPostalCode"?: string;
    /** The mailing address postal city. */
    "Party.Organization.MailingPostalCity"?: string;
    /** The business address. */
    "Party.Organization.BusinessAddress"?: string;
    /** The business postal code. */
    "Party.Organization.BusinessPostalCode"?: string;
    /** The business postal city. */
    "Party.Organization.BusinessPostalCity"?: string;
}

/** Data from ER (Enhetsregisteret). */
export interface ER {
    /** The organization number. */
    OrgNumber?: string;
    /** The organization name. */
    Name?: string;
    /** The unit type. */
    UnitType?: string;
    /** The phone number. */
    TelephoneNumber?: string;
    /** The mobile number. */
    MobileNumber?: string;
    /** The fax number. */
    FaxNumber?: string;
    /** The email address. */
    EMailAddress?: string;
    /** The internet address. */
    InternetAddress?: string;
    /** The mailing address. */
    MailingAddress?: string;
    /** The mailing postal code. */
    MailingPostalCode?: string;
    /** The mailing postal city. */
    MailingPostalCity?: string;
    /** The business address */
    BusinessAddress?: string;
    /** The business postal code. */
    BusinessPostalCode?: string;
    /** The business postal city. */
    BusinessPostalCity?: string;
}

/** Data from DSF (Det Sentrale Folkeregisteret). */
export interface DSF {
    /** The persons social security number. */
    SSN?: string;
    /** The persons full name. */
    Name?: string;
    /** The persons first name. */
    FirstName?: string;
    /** The persons middle name. */
    MiddleName?: string;
    /** The persons last name. */
    LastName?: string;
    /** The persons telephone number. */
    TelephoneNumber?: string;
    /** The persons mobile number. */
    MobileNumber?: string;
    /** The persons mailing address. */
    MailingAddress?: string;
    /** The persons mailing postal code. */
    MailingPostalCode?: string;
    /** The persons full name. */
    MailingPostalCity?: string;
    /** The persons address municipal number. */
    AddressMunicipalNumber?: string;
    /** The persons address municipal name. */
    AddressMunicipalName?: string;
    /** The persons address street name. */
    AddressStreetName?: string;
    /** The persons address house number. */
    AddressHouseNumber?: string;
    /** The persons address house letter. */
    AddressHouseLetter?: string;
    /** The persons address postal code. */
    AddressPostalCode?: string;
    /** The persons address city. */
    AddressCity?: string;
}

/** Schema that describes the prefill configuration for Altinn applications. */
export interface Prefill {
    /** Flag to determine if existing values in the app data model can be overwritten by prefill data. */
    allowOverwrite?: boolean;
    UserProfile?: UserProfile;
    ER?: ER;
    DSF?: DSF;
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T | null {
  if (!mappings)
    mappings = [];
  if (!data)
    return null;

  const mappingIndexName = "__mappingIndex";
  if (data[mappingIndexName])
    return <T>mappings[data[mappingIndexName]].target;

  data[mappingIndexName] = mappings.length;

  let result: any = new type();
  mappings.push({ source: data, target: result });
  result.init(data, mappings);
  return result;
}