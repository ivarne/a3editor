//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.5.2.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------





/** Policy for defining rules for who (subjects) can do actions on resources in an app. */
export interface Policy {
    /** Required array containing one or more rules. */
    Rules: Rule[];
}

/** Rule describing who (subjects) can do actions on resources in the app. */
export interface Rule {
    /** The intended consequence of a satisfied rule (either "Permit" or "Deny"). */
    Effect: RuleEffect;
    /** Optional description of the rule. */
    Description?: string;
    /** Array containing one or more subjects. */
    Subjects: string[];
    /** Array containing one or more resources. */
    Resources: string[];
    /** Array containing one or more actions that can be performed on the resources. */
    Actions: Actions[];
}

/** JSON Schema describing a simplified access control policy format for Altinn applications. */
export interface Policy2 {
    Policy?: Policy;
}

export enum RuleEffect {
    Permit = "Permit",
    Deny = "Deny",
}

/** An action that can be performed on the resources. */
export enum Actions {
    Instantiate = "instantiate",
    Read = "read",
    Write = "write",
    Confirm = "confirm",
    Complete = "complete",
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T | null {
  if (!mappings)
    mappings = [];
  if (!data)
    return null;

  const mappingIndexName = "__mappingIndex";
  if (data[mappingIndexName])
    return <T>mappings[data[mappingIndexName]].target;

  data[mappingIndexName] = mappings.length;

  let result: any = new type();
  mappings.push({ source: data, target: result });
  result.init(data, mappings);
  return result;
}