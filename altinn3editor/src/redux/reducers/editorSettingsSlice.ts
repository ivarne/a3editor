import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { Languages } from "../types";
import { load } from "./currentRepoSlice";

interface SettingsRoot {
  activeLanguages: { [language in Languages]?: boolean };
}

const initialState: SettingsRoot = {
  activeLanguages: { nb: true },
};

// Redux Toolkit allows us to write "mutating" logic in reducers. It
// doesn't actually mutate the state because it uses the Immer library,
// which detects changes to a "draft state" and produces a brand new
// immutable state based off those changes
export const editorSettingsSlice = createSlice({
  name: "editorSettings",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    toggleLanguage: (state, action: PayloadAction<Languages>) => {
      state.activeLanguages[action.payload] = !state.activeLanguages[action.payload];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(load, (state, action) => {
      // Ensure that languages are initialized correctly when a new app is loaded
      state.activeLanguages = {};
      Object.keys(action.payload.resources).forEach((language) => {
        state.activeLanguages[language as Languages] = true;
      });
    });
  },
});

export const { toggleLanguage } = editorSettingsSlice.actions;

export default editorSettingsSlice.reducer;
